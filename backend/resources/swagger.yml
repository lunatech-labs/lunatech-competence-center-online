# The endpoints of the Competence Center Backend in YAML
swagger: "2.0"
info:
  version: "0.0.1"
  title: "Competence Center API"
  description: Store data for awesome people
# the domain of the service
host: localhost:8081
# will be prefixed to all paths
basePath: /
# array of all schemes that your API supports
schemes:
  - http
consumes:
  - application/json
produces:
  - application/json
  - application/pdf

paths:
  /employees:
    get:
      description: Get list of employee
      responses:
        '200':
          description: An list of employees with most recent data
          schema:
            type: array
            items:
              $ref: '#/definitions/Employee'
              
  /employees/{employeeId}:
    get:
      description: Get personal data for specific user
      parameters:
        - $ref: '#/parameters/employeeId'
      responses:
        '200':
          description: get specific employee data
          schema:
            $ref: '#/definitions/Employee'
      
  /employees/me:
    get:
      description: Get data for logged in user
      responses:
        '200':
          description: get employee data
          schema:
            $ref: '#/definitions/Employee'
    put:
      summary: Create new Employee or update
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - $ref: '#/parameters/employeeData'
      responses:
        201:
          description: created
          schema:
            $ref: '#/definitions/Employee'
  /cvs:
    post:
      summary: Create CV
      consumes:
        - application/json
      produces:
        - application/pdf
      description: Generate a CV for user in body
      parameters:
        - $ref: '#/parameters/cvData'
      responses:
        '200':
          description: Returns PDF
          schema: 
            type: file
  /career:
    get:
      description: Get list of career framework levels
      responses:
        '200':
          description: A list of the levels of the career framework
          schema:
            type: array
            items:
              $ref: '#/definitions/Career'

  /career/{shortname}:
    get:
      description: Get the data of an specific level of the framework
      parameters:
        - $ref: '#/parameters/shortname'
      responses:
        '200':
          description: get specific framework level data
          schema:
            $ref: '#/definitions/Career'
parameters:
  employeeData:
    in: body
    name: employ
    description: data needed to create an Employee
    required: true
    schema:
      $ref: '#/definitions/Employee'
  cvData:
    in: body
    name: cvdata
    description: data to generate a CV
    required: true
    schema:
      $ref: '#/definitions/CV'
  employeeId: 
    in: path
    name: employeeId
    description: todo
    required: true
    type: string
  shortname:
    in: path
    name: shortname
    description: Shortname of the level as defined in the career framework
    required: true
    type: string

definitions:
  Employee:
    type: object
    properties:
      basics:
        $ref: '#/definitions/BasicDetails'
      skills:
        type: array
        items:
          $ref: '#/definitions/Skill'
      achievements:
        type: array
        items:
          $ref: '#/definitions/Achievement'
      projects:
        type: array
        items:
          $ref: '#/definitions/Project'
      educations:
        type: array
        items:
          $ref: '#/definitions/Education'
  BasicDetails:
    type: object
    required:
     - givenName
     - familyName
     - label
     - startYear
     - email
     - profile

    properties:
      givenName:
        type: string
        description: How you normally call the person
      familyName:
        type: string
        description: The family name
      label:
        type: string
        description: job title
      startYear:
        type: string
      email:
        type: string
        format: email
      image:
        type: string
      profile:
        type: string
      contact:
        $ref: '#/definitions/Contact'

  Contact:
    type: object
    properties:
      name:
        type: string
      address:
        type: string
      postalCode:
        type: string
      city:
        type: string
      phone:
        type: string
      email:
        type: string
      countryCode:
        type: string

  Skills:
    type: object
    properties:
      interpersonal:
        type: array
        items:
          type: string
      leadership:
        type: array
        items:
          type: string
      managerial:
        type: array
        items:
          type: string

  Specialization:
    type: object
    properties:
      name:
        type: string
      requiredCurriculum:
        type: string
      optionalCurriculum:
        type: string

  Career:
    type: object
    properties:
      name:
        type: string
      shortName:
        type: string
      description:
        type: string
      workableLevel:
        type: string
      yearsOfExperience:
        type: number
      specialized:
        type: boolean
      canBeOa:
        type: boolean
      canBePl:
        type: boolean
      requiredCurriculum:
        type: string
      optionalCurriculum:
        type: string
      specializations:
        type: array
        items:
          $ref: '#/definitions/Specialization'
      skills:
        $ref: '#/definitions/Skill'

  CV:
    type: object
    required:
      - employee
      - meta
    properties:
      employee:
        $ref: '#/definitions/Employee'
      meta:
        $ref: '#/definitions/Meta'

  Meta:
    type: object
    required:
    - language
    - office
    properties:
      language:
        type: string
        enum: 
          - FR
          - NL
      office: 
        type: string
        enum:
          - Amsterdam
          - Paris
          - Rotterdam
  Skill:
    type: object
    properties:
      category:
        type: string
      name:
        type: string
      level:
        type: integer
        format: int32
  Achievement:
    type: string
  Project:
    type: object
    properties:
      client:
        type: string
      startDate:
        type: string
      endDate:
        type: string
      role:
        type: string
      summary:
        type: string
  Education:
    type: object
    properties:
      institution:
        type: string
      country:
        type: string
      studyType:
        type: string
      startDate:
        type: string
      endDate:
        type: string
      description:
        type: string
  Error:
    type: object
    properties:
      internalCode:
        type: integer
        format: int32
      errorMessage:
        type: string
      httpStatusCode:
        type: integer
        format: int32
      timestamp:
        type: integer
        format: int64
