{
  "id": "databases",
  "name": "Databases",
  "description": "Almost every project requires some form of persistent data storage. There exist many different databases, and with good reason: there is no silver bullet for data storage, and relational databases are still some of the most important and versatile tools that any developer will have to deal with at some point in time.",
  "headmaster": "dirk.jonker@lunatech.com",
  "teachers": [
    "dirk.jonker@lunatech.com"
  ],
  "tags": [],
  "image": "/images/databases.png",
  "topics": [
    {
      "id": "database-fundamentals",
      "name": "Database fundamentals",
      "description": "There are many ways to store data, but being able to choose an appropriate one can be difficult.",
      "tags": [],
      "resources": [
        {
          "name": "Designing Data-Intensive Applications (Martin Kleppmann, 2017): Chapter 1 and 2",
          "type": "book",
          "url": "https://dataintensive.net/"
        }
      ],
      "abilities": [
        "Basic knowledge about different database types and their use cases",
        "Know about the benefits and use cases of Relational databases",
        "Know about the benefits and use cases of Key/Value databases",
        "Know about the benefits and use cases of Document databases",
        "Know about the benefits and use cases of Graph databases",
        "Know about the benefits and use cases of Analytical databases",
        "Considering trade-offs to when choosing between different database types"
      ],
      "assessment-questions": [
        {
          "question": "What are the most important trade-offs you need to make when choosing the right database for a project?",
          "answer-hint": "Data model capabilities; latency vs durability; read vs write performance; CAP theorem; ACID vs BASE"
        }
      ]
    },
    {
      "id": "rdbms-sql-basics",
      "name": "SQL basics",
      "description": "Relational databases and SQL",
      "tags": [],
      "resources": [
        {
          "name": "Codecademy: Learn SQL",
          "type": "other",
          "url": "https://www.codecademy.com/learn/learn-sql"
        },
        {
          "name": "Khan Academy: Intro to SQL",
          "type": "video",
          "url": "https://www.khanacademy.org/computing/computer-programming/sql"
        },
        {
          "name": "PostgreSQL Documentation Part I. Tutorial",
          "type": "documentation",
          "url": "https://www.postgresql.org/docs/current/static/tutorial.html"
        },
        {
          "name": "zentut SQL Tutorial",
          "type": "other",
          "url": "http://www.zentut.com/sql-tutorial/"
        }
      ],
      "abilities": [
        "Writing basic SQL operations using INSERT, SELECT, UPDATE, DELETE",
        "Understand the intricacies of NULL values",
        "Using parameterization in queries for performance and security"
      ],
      "assessment-questions": [
        {
          "question": "What are the most commonly used SQL operations?",
          "answer-hint": "INSERT, SELECT, UPDATE, DELETE"
        },
        {
          "question": "Why is it useful to know SQL when you are using an ORM?"
        },
        {
          "question": "What is an SQL injection attack and how do you prevent it?"
        }
      ]
    },
    {
      "id": "rdbms-sql-set-operations",
      "name": "SQL set operations",
      "description": "Understand the concepts of set theory and how they are used in relational databases",
      "tags": [],
      "dependencies": [
        "rdbms-sql-basics"
      ],
      "resources": [
        {
          "name": "Joins Between Tables",
          "type": "documentation",
          "url": "https://www.postgresql.org/docs/current/static/tutorial-join.html"
        },
        {
          "name": "SQL Join",
          "type": "article",
          "url": "https://en.wikipedia.org/wiki/Join_(SQL)"
        },
        {
          "name": "SQL Joins Tutorial for Beginners - Inner Join, Left Join, Right Join, Full Outer Join",
          "type": "video",
          "url": "https://www.youtube.com/watch?v=2HVMiPPuPIM"
        },
        {
          "name": "SQL Combining Queries - Union, Intersect, Except",
          "type": "documentation",
          "url": "https://www.postgresql.org/docs/current/static/queries-union.html"
        },
        {
          "name": "SQL Union",
          "type": "article",
          "url": "https://www.w3resource.com/sql/sql-union.php"
        }
      ],
      "abilities": [
        "Use JOIN operators to combine data from multiple sets",
        "Use UNION to combine data from multiple result sets",
        "Use INTERSECT to find identical values across multiple sets",
        "Use EXCEPT to find differences in values across multiple sets"
      ],
      "assessment-questions": [
        {
          "question": "What is the difference between an INNER and an OUTER join?"
        },
        {
          "question": "How do you combine columns from table A with columns from table B where some rows in table A do not have a related row in table B?",
          "answer-hint": "`select a.*, b.* from a left join b on (a.id=b.a_id)`"
        },
        {
          "question": "How do you find the rows in table A that do not have a related row in table B?"
        },
        {
          "question": "How can you select values that exist in either set A or set B, but not in both?"
        },
        {
          "question": "What is the difference between UNION and UNION ALL?"
        },
        {
          "question": "Why should you care about the uniqueness of rows in a table?"
        }
      ]
    },
    {
      "id": "rdbms-sql-aggregates",
      "name": "Aggregates",
      "description": "Foo, Bar, Baz",
      "tags": [],
      "dependencies": [
        "rdbms-sql-basics"
      ],
      "resources": [
        {
          "name": "Aggregate Functions",
          "type": "documentation",
          "url": "https://www.postgresql.org/docs/current/static/tutorial-agg.html"
        },
        {
          "name": "SQL Aggregate Functions",
          "type": "article",
          "url": "http://www.zentut.com/sql-tutorial/sql-aggregate-functions/"
        }

      ],
      "abilities": [
        "Use aggregate function in queries (COUNT, MAX, MIN, SUM, AVG, ...)",
        "Combine aggregate functions with GROUP BY and HAVING"
      ],
      "assessment-questions": [
        {
          "question": "Why would you use aggregate functions in a query instead of making the calculation in your code"
        },
        {
          "question": "How do you find all rows that occur more than 2 times in your result set"
        }
      ]
    },
    {
      "id": "rdbms-concurrency",
      "name": "RDBMS Concurrency",
      "description": "Understand how relational databases deal with concurrent operations on data. Prevent race conditions and explain how different isolation levels may or may not be used to prevent such conditions.",
      "tags": [],
      "dependencies": [
        "rdbms-constraints",
        "rdbms-indexes"
      ],
      "resources": [
        {
          "name": "MIT OpenCourseWare: Database Systems",
          "type": "other",
          "url": "https://ocw.mit.edu/courses/electrical-engineering-and-computer-science/6-830-database-systems-fall-2010/index.htm"
        },
        {
          "name": "PostgreSQL Documentation Chapter 13. Concurrency Control",
          "type": "documentation",
          "url": "https://www.postgresql.org/docs/current/static/mvcc.html"
        },
        {
          "name": "Designing Data-Intensive Applications (Martin Kleppmann, 2017): Chapter 7",
          "type": "book",
          "url": "https://dataintensive.net/"
        }
      ],
      "abilities": [
        "Explain how Multi-Version Concurrency Control (MVCC) works",
        "Explain the race conditions that can exist in a database, and explain how to prevent dealing with them",
        "Using explicit locks to prevent race conditions",
        "Explain how different isolation levels can prevent race conditions"
      ],
      "assessment-questions": [
        {
          "question": "What is a dirty read and why should you prevent them?"
        },
        {
          "question": "How can you read from a table, do a complicated operation in your application, and then update some of these rows?"
        },
        {
          "question": "What is a deadlock? How can deadlocks occur? What does the database do in the case of a deadlock?"
        },
        {
          "question": "In PostgreSQL, what is the difference between read committed, repeatable read, and serializable?"
        }
      ]
    },
    {
      "id": "rdbms-schemas",
      "name": "Relational schema design",
      "description": "Designing schemas for relational databases",
      "tags": [],
      "dependencies": [ "rdbms-sql-basics" ],
      "resources": [
        {
          "name": "Logical Database Design and E-R Diagrams",
          "type": "video",
          "url": "https://www.youtube.com/watch?v=ZBgXb66Ckz0"
        },
        {
          "name": "Database Normalization",
          "type": "video",
          "url": "https://www.youtube.com/watch?v=QqlPXKxN6LQ"
        }
      ],
      "abilities": [
        "Designing a database schema using normalisation",
        "Creating Entity-Relationship-Diagrams (ERDs) or similar drawings of tables and relations",
        "Know and apply the principles of set theory to the design"
      ],
      "assessment-questions": [
        {
          "question": "What are the advantages and disadvantages of 3NF?"
        },
        {
          "question": "What is an appropriate type for a surrogate key?"
        },
        {
          "question": "Why should a table design not violate the principles of set theory?"
        }
      ]
    },
    {
      "id": "rdbms-indexes",
      "name": "Indexes",
      "description": "Indexes for relational databases",
      "tags": [],
      "dependencies": [ "rdbms-schemas" ],
      "resources": [
        {
          "name": "Use the Index, Luke",
          "type": "documentation",
          "url": "https://use-the-index-luke.com/"
        },
        {
          "name": "Postgres: Chapter 11. Indexes",
          "type": "documentation",
          "url": "https://www.postgresql.org/docs/current/static/indexes-intro.html"
        },
        {
          "name": "Designing Data-Intensive Applications (Martin Kleppmann, 2017): Chapter 3",
          "type": "book",
          "url": "https://dataintensive.net/"
        }
      ],
      "abilities": [
        "Knowing when to apply an index to a table",
        "Creating indexes to optimize problematic queries",
        "Using query plans to find performance issues",
        "Making trade-offs between write and read performance of indexes"
      ],
      "assessment-questions": [
        {
          "question": "What is the most important data structure of a relational database?"
        },
        {
          "question": "What is a covering index?"
        },
        {
          "question": "How are indexes usually stored in a relational database?"
        }
      ]
    },
    {
      "id": "rdbms-constraints",
      "name": "Constraints",
      "description": "Constraints for relational databases",
      "tags": [],
      "dependencies": [ "rdbms-schemas" ],
      "resources": [],
      "abilities": [
        "Know how and when to use foreign keys",
        "Using constraints to enforce data quality"
      ],
      "assessment-questions": [
        {
          "question": "What are advantages and disadvantages of using foreign keys?"
        },
        {
          "question": "What is referential integrity?"
        },
        {
          "question": "Why do you need to think about cascading foreign key changes?"
        },
        {
          "question": "When do you check a constraint in the database and when in your application?"
        }
      ]
    },
    {
      "id": "rdbms-stored-procedures",
      "name": "Stored procedures",
      "description": "Stored procedures for relational databases",
      "tags": [],
      "dependencies": [ "rdbms-schemas" ],
      "resources": [],
      "abilities": [
        "Writing and using stored procedures"
      ],
      "assessment-questions": [
        {
          "question": "What are advantages and disadvantages of using stored procedures?"
        },
        {
          "question": "What are the trade-offs between a stored procedure in your database and a function in your application?"
        }
      ]
    },
    {
      "id": "rdbms-administration-basics",
      "name": "Database administration basics",
      "description": "Basic administration of RDBMS",
      "tags": [],
      "dependencies": [
        "rdbms-indexes",
        "rdbms-constraints",
        "rdbms-stored-procedures"
      ],
      "resources": [
        {
          "name": "PostgreSQL Documentation Part III. Server Administration",
          "type": "documentation",
          "url": "https://www.postgresql.org/docs/current/static/admin.html"
        }
      ],
      "abilities": [
        "Configuring the database",
        "Managing users and access",
        "Creating databases"
      ],
      "assessment-questions": []
    },
    {
      "id": "rdbms-administration-advanced",
      "name": "Database administration advanced",
      "description": "Setting up replication, backups, tuning databases",
      "tags": [],
      "dependencies": [ "rdbms-administration-basics" ],
      "resources": [],
      "abilities": [
        "Optimising indexes, constraints, and stored procedures",
        "Making and restoring backups",
        "Setting up replication"
      ],
      "assessment-questions": []
    }
  ],
  "projects": [
    {
      "id": "rdbms-project-1",
      "name": "Designing a database schema for a Phonebook application",
      "description": "The goal of this project is to design a database schema in third normal format (3NF) for a phonebook application.\n\n# Requirements\n\nDesign an API for a phonebook application. The phonebook has one top-level resource, a `Contact`. A contact has a name and a type, which can have the value `Personal` or `Business`.\n\nContacts have zero or more phone numbers. A phone number consists of a number and a type, which is one of 'Mobile' or 'Fixed'. \n\n# Deliverables\n\nPostgreSQL compatible CREATE TABLE statements. Can be combined with the Scala or Java Phonebook project."
    }
  ]
}
