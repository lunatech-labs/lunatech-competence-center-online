{
  "id": "fp",
  "name": "Functional Programming",
  "description": "Functional Programming is a programming paradigm. It's a declarative style which avoids changing state and mutable data",
  "headmaster": "mark.de.jong@lunatech.com",
  "teachers": ["erik.bakker@lunatech.com"],
  "tags": ["scala"],
  "image": "/images/fp.jpg",
  "topics": [
    {
      "id": "recursion",
      "name": "Recursion",
      "description": "Recursion in computer science is a method where the solution to a problem depends on solutions to smaller instances of the same problem.",
      "tags": ["required-for-junior"],
      "resources": [
        {
          "name": "Scala: recursive functions",
          "type": "article",
          "url": "http://fruzenshtein.com/scala-recursive-function/"
        },
        {
          "name": "Scala/Recursion",
          "type": "article",
          "url": "https://en.wikibooks.org/wiki/Scala/Recursion"
        },
        {
          "name": "Learn you a Haskell",
          "type": "book",
          "url": "http://learnyouahaskell.com/recursion",
          "tags": ["haskell"],
          "note": "Chapter: Recursion"
        },
        {
          "name": "Learn you a Haskell",
          "type": "book",
          "url": "http://learnyouahaskell.com/higher-order-functions#folds",
          "tags": ["haskell"],
          "note": "Paragraph: Only folds and horses"
        }
      ],
      "abilities": [
        "Write a recursive function which sums up a list of numbers",
        "Use the @tailrec annotation",
        "Write quicksort in terms of recursion"
      ],
      "assessment-questions": [
        { "question": "Where does recursion really shine?" },
        { "question": "When would you use a fold instead of recursion?" },
        { "question": "Why and when would you use @tailrec?" }
      ]
    },
    {
      "id": "higher-order-functions",
      "name": "Higher-order functions",
      "description": "These are functions that take other functions as parameters, or whose result is a function.",
      "tags": ["required-for-junior"],
      "dependencies": ["recursion"],
      "resources": [
        {
          "name": "Learn you a Haskell",
          "type": "book",
          "url": "http://learnyouahaskell.com/higher-order-functions",
          "tags": ["haskell"],
          "note": "Chapter: Higher-order functions"
        },
        {
          "name": "Scala/Higher-order functions 1",
          "type": "article",
          "url": "https://en.wikibooks.org/wiki/Scala/Higher-order_functions_1"
        },
        {
          "name": "Higher-order functions",
          "type": "article",
          "url": "https://docs.scala-lang.org/tour/higher-order-functions.html"
        },
        {
          "name": "Higher-order functions",
          "type": "article",
          "url": "https://www.scala-exercises.org/scala_tutorial/higher_order_functions"
        }
      ],
      "abilities": [
        "Define the generic function map for a List using a higher-order function and recursion",
        "Define the generic function filter for a List using a higher-order function and recursion"
      ],
      "assessment-questions": [
        { "question": "Why are higher-order functions useful?" }
      ]
    },
    {
      "id": "adt",
      "name": "Algebraic data types",
      "description": "In computer programming, especially functional programming and type theory, an algebraic data type is a kind of composite type, i.e., a type formed by combining other types.",
      "tags": ["required-for-junior"],
      "resources": [
        {
          "name": "Learn you a Haskell",
          "type": "book",
          "url": "http://learnyouahaskell.com/making-our-own-types-and-typeclasses#algebraic-data-types",
          "tags": ["haskell"],
          "note": "Algebraic data types intro"
        },
        {
          "name": "Everything You Ever Wanted to Know About Sealed Traits in Scala",
          "type": "article",
          "url": "https://underscore.io/blog/posts/2015/06/02/everything-about-sealed.html"
        },
        {
          "name": "Modeling with Union Types",
          "type": "article",
          "url": "https://robots.thoughtbot.com/modeling-with-union-types"
        }
      ],
      "abilities": [
        "Define a ADT in Scala",
        "Define a recursive ADT in Scala",
        "Define a generic ADT in Scala"
      ],
      "assessment-questions": [
        { "question": "Why would you like to group certain types together?" },
        { "question": "Name a few data structures which are defined as an ADT in Scala" }
      ]
    },
    {
      "id": "type-classes",
      "name": "Type classes",
      "description": "In computer science, a type class is a type system construct that supports ad hoc polymorphism. This is achieved by adding constraints to type variables in parametrically polymorphic types.",
      "tags": ["required-for-junior"],
      "dependencies": ["adt"],
      "resources": [
        {
          "name": "Learn you a Haskell",
          "type": "book",
          "url": "http://learnyouahaskell.com/types-and-typeclasses",
          "tags": ["haskell"],
          "note": "Paragraph: Typeclasses 101"
        },
        {
          "name": "Scala with cats",
          "type": "book",
          "url": "https://underscore.io/books/scala-with-cats/",
          "note": "Chapter 1.1"
        },
        {
          "name": "Learn you a Haskell",
          "type": "book",
          "url": "http://learnyouahaskell.com/making-our-own-types-and-typeclasses#typeclasses-102",
          "tags": ["haskell"],
          "note": "Paragraph: Typeclasses 102"
        },
        {
          "name": "Type classes",
          "type": "article",
          "url": "https://www.scala-exercises.org/scala_tutorial/type_classes"
        },
        {
          "name": "Type classes in Scala",
          "type": "article",
          "url": "https://blog.scalac.io/2017/04/19/typeclasses-in-scala.html"
        }
      ],
      "abilities": [
        "Define a type class your self",
        "Define instances of your type class",
        "Summon a instance of the type class inside one of your functions"
      ],
      "assessment-questions": [
        { "question": "Why would use type classes instead of inheritance?" }
      ]
    },
    {
      "id": "hkt",
      "name": "Higher-kinded types",
      "description": "A higher-kinded type is just a type-level higher-order function",
      "dependencies": ["type-classes"],
      "resources": [
        {
          "name": "Learn you a Haskell",
          "type": "book",
          "url": "http://learnyouahaskell.com/making-our-own-types-and-typeclasses#kinds-and-some-type-foo",
          "tags": ["haskell"],
          "note": "Paragraph: Kinds and some type-foo"
        },
        {
          "name": "Scala with cats",
          "type": "book",
          "url": "https://underscore.io/books/scala-with-cats/",
          "note": "Chapter 3.4"
        },
        {
          "name": "Scala: Types of a higher kind",
          "type": "article",
          "url": "https://www.atlassian.com/blog/archives/scala-types-of-a-higher-kind"
        },
        {
          "name": "Higher-kinded types: the difference between giving up, and moving forward",
          "type": "article",
          "url": "https://typelevel.org/blog/2016/08/21/hkts-moving-forward.html"
        },
        {
          "name": "Compiler plugin for making type lambdas (type projections) easier to write",
          "type": "article",
          "url": "https://github.com/non/kind-projector"
        }
      ],
      "abilities": [
        "Know what the kind is of a `List`",
        "Know what the kind is of a `Either`"
      ],
      "assessment-questions": [
        { "question": "What do higher kinded types allows us to do?" }
      ]
    },
    {
      "id": "semigroup-and-monoid",
      "name": "Semigroup and monoids",
      "description": "Monoid and semigroup, these typeclasses allow us to add or combine values.",
      "dependencies": ["type-classes"],
      "resources": [
        {
          "name": "Learn you a Haskell",
          "type": "book",
          "url": "http://learnyouahaskell.com/functors-applicative-functors-and-monoids",
          "tags": ["haskell"],
          "note": "Paragraph: Functors redux"
        },
        {
          "name": "Scala with cats",
          "type": "book",
          "url": "https://underscore.io/books/scala-with-cats/",
          "note": "Chapter 2"
        }
      ],
      "abilities": [
        "Create a Monoid instance for List",
        "Create a Semigroup instance for Option"
      ],
      "assessment-questions": [
        { "question": "Name a few instances for semigroup" }
      ]
    },
    {
      "id": "functor",
      "name": "Functor",
      "description": "Functors are things that can be mapped over, like lists, Maybes, trees, and such.",
      "dependencies": ["type-classes", "hkt"],
      "resources": [
        {
          "name": "Learn you a Haskell",
          "type": "book",
          "url": "http://learnyouahaskell.com/functors-applicative-functors-and-monoids",
          "tags": ["haskell"],
          "note": "Paragraph: Functors redux"
        },
        {
          "name": "Scala with cats",
          "type": "book",
          "url": "https://underscore.io/books/scala-with-cats/",
          "note": "Chapter 3.5"
        },
        {
          "name": "Functors",
          "type": "article",
          "url": "https://www.scala-exercises.org/cats/functor"
        }
      ],
      "abilities": [
        "Create a Functor instance for List",
        "Create a Functor instance for Option"
      ],
      "assessment-questions": [
        { "question": "Name a few instances for functor" }
      ]
    },
    {
      "id": "contravariant",
      "name": "Contravariant",
      "description": "The contravariant functor, provides an operation called contramap that represents “prepending” an operation to a chain",
      "dependencies": ["type-classes", "hkt"],
      "resources": [
        {
          "name": "Scala with cats",
          "type": "book",
          "url": "https://underscore.io/books/scala-with-cats/",
          "note": "Chapter 3.6.1"
        },
        {
          "name": "Contravariant functors - an intuition",
          "type": "article",
          "url": "http://igstan.ro/posts/2013-10-31-contravariant-functors-an-intuition.html"
        }
      ],
      "abilities": [
        "Create a Contravariant instance for Ordering"
      ],
      "assessment-questions": [
        { "question": "Name a few instances for contravariant" }
      ]
    },
    {
      "id": "invariant",
      "name": "Invariant",
      "description": "Invariant functors implement a method called imap that is informally equivalent to a combination of map and contramap.",
      "dependencies": ["type-classes", "hkt"],
      "resources": [
        {
          "name": "Scala with cats",
          "type": "book",
          "url": "https://underscore.io/books/scala-with-cats/",
          "note": "Chapter 3.6.2"
        }
      ],
      "abilities": [
        "Create a Invariant instance for a Codec (encoder/decoder) type class"
      ],
      "assessment-questions": [
        { "question": "Why does Invariant match codecs so well?" }
      ]
    },
    {
      "id": "applicative",
      "name": "Applicative",
      "description": "Applicative functors allow you to take a 'normal' function (taking non-functorial arguments) use it to operate on several values that are in functor contexts. As a corollary, this gives you effectful programming without monads.",
      "dependencies": ["type-classes", "hkt"],
      "resources": [
        {
          "name": "Learn you a Haskell",
          "type": "book",
          "url": "http://learnyouahaskell.com/functors-applicative-functors-and-monoids",
          "tags": ["haskell"],
          "note": "Paragraph: Applicative functors"
        },
        {
          "name": "Scala with cats",
          "type": "book",
          "url": "https://underscore.io/books/scala-with-cats/",
          "note": "Chapter 6.2 and 6.5"
        },
        {
          "name": "Apply",
          "type": "article",
          "url": "https://www.scala-exercises.org/cats/apply"
        },
        {
          "name": "Applicative",
          "type": "article",
          "url": "https://www.scala-exercises.org/cats/applicative"
        },
        {
          "name": "Haskell/Applicative functors",
          "type": "article",
          "url": "https://en.wikibooks.org/wiki/Haskell/Applicative_functors",
          "tags": ["haskell"]
        }
      ],
      "abilities": [
        "Create a Applicative instance for List",
        "Create a Applicative instance for Option"
      ],
      "assessment-questions": [
        { "question": "Name a few instances for Applicative" }
      ]
    },
    {
      "id": "monad",
      "name": "Monad",
      "description": "A monad is a mechanism for sequencing computations.",
      "dependencies": ["type-classes", "hkt"],
      "resources": [
        {
          "name": "Learn you a Haskell",
          "type": "book",
          "url": "http://learnyouahaskell.com/a-fistful-of-monads",
          "tags": ["haskell"],
          "note": "Chapter: A Fistful of Monads"
        },
        {
          "name": "Scala with cats",
          "type": "book",
          "url": "https://underscore.io/books/scala-with-cats/",
          "note": "Chapter 4.1"
        },
        {
          "name": "Monad",
          "type": "article",
          "url": "https://www.scala-exercises.org/cats/monad"
        },
        {
          "name": "Haskell/Understanding monads",
          "type": "article",
          "url": "https://en.wikibooks.org/wiki/Haskell/Understanding_monads",
          "tags": ["haskell"]
        }
      ],
      "abilities": [
        "Create a Monad instance for List",
        "Create a Monad instance for Option",
        "Create a Monad instance for Future"
      ],
      "assessment-questions": [
        { "question": "Name a few instances for Monad" },
        { "question": "When would you use a Monad and when a Applicative?" }
      ]
    },
    {
      "id": "traverse",
      "name": "Traverse",
      "description": "Class of data structures that can be traversed from left to right, performing an action on each element.",
      "dependencies": ["type-classes", "hkt"],
      "resources": [
        {
          "name": "Scala with cats",
          "type": "book",
          "url": "https://underscore.io/books/scala-with-cats/",
          "note": "Chapter 7.2"
        },
        {
          "name": "Traverse",
          "type": "article",
          "url": "https://www.scala-exercises.org/cats/traverse"
        }
      ],
      "abilities": [
        "Create a Traverse instance for List",
        "Create a polymorphic case class with metadata and create a Traverse instance for it"
      ],
      "assessment-questions": [
        { "question": "Name a few instances for Traverse" }
      ]
    },
    {
      "id": "foldable",
      "name": "Foldable",
      "description": "Class of data structures that can be folded to a summary value.",
      "dependencies": ["type-classes", "hkt"],
      "resources": [
        {
          "name": "Scala with cats",
          "type": "book",
          "url": "https://underscore.io/books/scala-with-cats/",
          "note": "Chapter 7.1"
        },
        {
          "name": "Foldable",
          "type": "article",
          "url": "https://www.scala-exercises.org/cats/foldable"
        }
      ],
      "abilities": [
        "Create a Foldable instance for List"
      ],
      "assessment-questions": [
        { "question": "Name a few instances for Traverse" }
      ]
    },
    {
      "id": "reader-monad",
      "name": "Reader monad",
      "description": "Reader is a monad that allows us to sequence operations that depend on some input. Instances of Reader wrap up functions of one argument, providing us with useful methods for composing them.",
      "dependencies": ["monad"],
      "resources": [
        {
          "name": "Scala with cats",
          "type": "book",
          "url": "https://underscore.io/books/scala-with-cats/",
          "note": "Chapter 4.8"
        }
      ],
      "abilities": [
        "Got a working outcome of exercise 4.8.3 of Scala with cats"
      ],
      "assessment-questions": [
        { "question": "When would you use Reader?" }
      ]
    },
    {
      "id": "writer-monad",
      "name": "Writer monad",
      "description": "Writer is a monad that lets us carry a log along with a computation.",
      "dependencies": ["monad"],
      "resources": [
        {
          "name": "Scala with cats",
          "type": "book",
          "url": "https://underscore.io/books/scala-with-cats/",
          "note": "Chapter 4.7"
        }
      ],
      "abilities": [
        "Got a working outcome of exercise 4.7.3 of Scala with cats"
      ],
      "assessment-questions": [
        { "question": "When would you use a Writer Monad?" },
        { "question": "Would you use a Writer Monad for logging?" }
      ]
    },
    {
      "id": "state-monad",
      "name": "State monad",
      "description": "State allows us to pass additional state around as part of a computation.",
      "dependencies": ["monad"],
      "resources": [
        {
          "name": "Scala with cats",
          "type": "book",
          "url": "https://underscore.io/books/scala-with-cats/",
          "note": "Chapter 4.9"
        }
      ],
      "abilities": [
        "Got a working outcome of exercise 4.9.3 of Scala with cats"
      ],
      "assessment-questions": [
        { "question": "When would you use a State Monad?" }
      ]
    },
    {
      "id": "monad-transformers",
      "name": "Monad tranformers",
      "description": "Monads do not compose, yet you can stack them with Monad Transformers.",
      "dependencies": ["monad"],
      "resources": [
        {
          "name": "Scala with cats",
          "type": "book",
          "url": "https://underscore.io/books/scala-with-cats/",
          "note": "Chapter 5"
        },
        {
          "name": "Options in Futures, how to unsuck them",
          "type": "video",
          "url": "https://www.youtube.com/watch?v=hGMndafDcc8"
        }
      ],
      "abilities": [
        "Create a EitherT monad transformer stack with Future as effect type. Add combinators which lift Option, Either, Future[Either[String, ?]], etc into the stack."
      ],
      "assessment-questions": [
        { "question": "Why are monad transformers useful?" }
      ]
    }
  ],

  "projects": [
    {
      "id": "fp-euler-baby-steps",
      "name": "Project Euler's Baby Steps",
      "dependencies": ["object-oriented-i"],
      "description": "The goal of this project is to earn the **Baby Steps** award on [Project Euler](https://projecteuler.net/) using FP constructs.\n\n# Requirements\n\nProject Euler is a project that encourages, challenges and developes the skills on mathematics and programming. The exercises are abstract enough that you won't need to define almost any class hierarchy or complex application. You can read more about the project [here](https://projecteuler.net/about).\n\nCreate a new account, if you don't have already, and complete at least three Euler Problems attaining the Baby Steps awards. Since this Univerity Project is intended to get you started we recommend that you implement the first three problems:\n- [Multiples of 3 and 5](https://projecteuler.net/problem=1)\n- [Even Fibonacci numbers](https://projecteuler.net/problem=2)\n- [Largest prime factor](https://projecteuler.net/problem=3)\n\nAfter you solve each problem you can input the solution at their website to check for correctness. If you already earned the award through the Scala or Java project, you can challenge yourself to do it using FP constructs such as _HOF_ or _pure functions_, since Project Euler doesn't specify any programming paradigm and probably mutation is the easiest way to achieve a solution. After achieving this award there is nothing stopping you from doing the same with more difficult awards.\n\n# Deliverables\n\nA GitHub repository with the problems solved."
    }
  ]
}
